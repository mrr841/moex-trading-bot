import logging
from typing import Dict, List, Optional, Union
from telegram import Bot, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from telegram.error import TelegramError
from pathlib import Path
import json
from datetime import datetime
import asyncio

logger = logging.getLogger(__name__)

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, token: str, chat_id: Union[str, int], config_path: str = "config.json"):
        self.token = token
        self.chat_id = chat_id
        self.config_path = Path(config_path)
        self.bot = Bot(token=token)
        self.application: Optional[Application] = None
        self._init_handlers()

    def _init_handlers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.command_handlers = {
            'start': self._handle_start,
            'stats': self._handle_stats,
            'positions': self._handle_positions,
            'stop': self._handle_stop,
            'config': self._handle_config
        }

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            self.application = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            for command, handler in self.command_handlers.items():
                self.application.add_handler(CommandHandler(command, handler))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message)
            )

            logger.info("Starting Telegram bot in polling mode...")
            await self.application.run_polling()
        except Exception as e:
            logger.error(f"Failed to start Telegram bot: {str(e)}")
            raise

    async def send_message(self, 
                         text: str, 
                         parse_mode: Optional[str] = ParseMode.MARKDOWN,
                         reply_markup: Optional[Dict] = None) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
            return True
        except TelegramError as e:
            logger.error(f"Telegram send message error: {str(e)}")
            return False

    async def send_alert(self, alert_type: str, data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        try:
            message = self._format_alert(alert_type, data)
            return await self.send_message(message)
        except Exception as e:
            logger.error(f"Failed to send alert: {str(e)}")
            return False

    def _format_alert(self, alert_type: str, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        if alert_type == "trade":
            return format_trade_message(data)
        elif alert_type == "signal":
            return format_signal_message(data)
        elif alert_type == "error":
            return f"üö® *ERROR*\n{data.get('message', 'Unknown error')}"
        else:
            return json.dumps(data, indent=2)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ *Trading Bot Activated*\n\n"
            "Available commands:\n"
            "/stats - Performance metrics\n"
            "/positions - Current positions\n"
            "/config - Bot configuration\n"
            "/stop - Shutdown bot",
            parse_mode=ParseMode.MARKDOWN
        )

    async def _handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        stats = {"win_rate": 0.75, "pnl": 1500}
        await update.message.reply_text(
            f"üìä *Performance Stats*\n\n"
            f"‚Ä¢ Win Rate: {stats['win_rate']:.2%}\n"
            f"‚Ä¢ Total PnL: ${stats['pnl']:.2f}",
            parse_mode=ParseMode.MARKDOWN
        )

    async def _handle_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /config"""
        try:
            with open(self.config_path) as f:
                config = json.load(f)
                await update.message.reply_text(
                    f"‚öôÔ∏è *Current Config*\n\n"
                    f"```json\n{json.dumps(config, indent=2)}\n```",
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            await update.message.reply_text(f"‚ùå Failed to load config: {str(e)}")

    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text("‚ÑπÔ∏è Use commands to interact with bot")

# –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
def format_trade_message(trade: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
    return (
        f"üîÑ *Trade Executed*\n\n"
        f"‚Ä¢ Ticker: `{trade.get('ticker', 'N/A')}`\n"
        f"‚Ä¢ Type: {trade.get('type', 'N/A')}\n"
        f"‚Ä¢ Price: {trade.get('price', 0):.2f}\n"
        f"‚Ä¢ Quantity: {trade.get('quantity', 0)}\n"
        f"‚Ä¢ PnL: {trade.get('pnl', 0):.2f} ({trade.get('pnl_pct', 0):.2f}%)"
    )

def format_signal_message(signal: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ"""
    return (
        f"üö¶ *New Trading Signal*\n\n"
        f"‚Ä¢ Ticker: `{signal.get('ticker', 'N/A')}`\n"
        f"‚Ä¢ Direction: {signal.get('direction', 'N/A')}\n"
        f"‚Ä¢ Confidence: {signal.get('confidence', 0):.2%}\n"
        f"‚Ä¢ Price: {signal.get('price', 0):.2f}\n"
        f"‚Ä¢ Stop Loss: {signal.get('stop_loss', 0):.2f}\n"
        f"‚Ä¢ Take Profit: {signal.get('take_profit', 0):.2f}"
    )

async def send_alert(token: str, chat_id: Union[str, int], alert_type: str, data: Dict) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)"""
    bot = TelegramBot(token=token, chat_id=chat_id)
    return await bot.send_alert(alert_type, data)

async def start_telegram_bot(token: str, chat_id: Union[str, int]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    bot = TelegramBot(token=token, chat_id=chat_id)
    await bot.start_polling()